<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chienlung's Blog]]></title>
  <link href="http://Chienlung.github.com/atom.xml" rel="self"/>
  <link href="http://Chienlung.github.com/"/>
  <updated>2012-12-17T22:23:08+08:00</updated>
  <id>http://Chienlung.github.com/</id>
  <author>
    <name><![CDATA[Chienlung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ARP欺骗的实现]]></title>
    <link href="http://Chienlung.github.com/blog/2012/12/17/arpqi-pian-de-shi-xian/"/>
    <updated>2012-12-17T22:06:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2012/12/17/arpqi-pian-de-shi-xian</id>
    <content type="html"><![CDATA[<p>ARP欺骗是用处很大的一个技术，我们的路由器整天在欺骗我们的PC，没有这个欺骗我们就不能上网。</p>

<p>先稍微说下我们每天经历的ARP欺骗，比如早上开路由器开PC，我们上Google，PC在发送IP包之前（假设Google的IP为173.194.72.94，当然事先要先通过DNS服务器获取Google的IP，这个不多谈）要先这个IP包装配为以太网帧，所以PC必须要知道Google服务器端MAC，才能填充好以太网帧。要想知道Google的MAC地址，我们的PC就要发送ARP广播请求，跟你一个局域网里的所有以太网设备都能收到这个请求，你希望有人告诉自己与173.194.72.94匹配的MAC地址是多少，因为我们的PC跟Google的服务器不在一个局域网里，所以Google服务器没法收到你的ARP请求，但是如果这个局域网中有其他PC知道的话，它收到这个请求就会给你发送ARP应答告诉你，如果没人知道怎么办？只能靠骗了！这个骗子就是路由器，这也是它的一个职责。路由器用自己的MAC地址冒充Google服务器的MAC地址，给你发ARP应答糊弄你，你收到应答后喜得不行，然后把所有帧都发给了路由器。下面我们就看路由器时怎么欺骗你的。</p>

<p>路由器能捕捉到这个局域网里广播帧，假设路由器捕捉到的PC的ARP广播帧写成十六进制为：</p>

<pre><code>    FFFFFFFFFFFFCE1A8206DA0708060001080006040001CE1A820C6B07C0A8127A000000000000C0A8127B00000B00482A00000D00000060FB5EFB61FB
</code></pre>

<p>按以太网帧结构把这个帧分解后为：</p>

<pre><code>    FFFFFFFFFFFF---目的MAC，因为是广播帧，所以MAC地址全为1
    CE1A8206DA07---源MAC，这里就是你PC的MAC
    0806—---帧类型（以太网帧都是这个数）
    0001----硬件类型（以太网帧都是这个数）
    0800----协议类型（以太网帧都是这个数）
    06----硬件地址长度（以太网帧都是这个数）
    04----协议地址长度（以太网帧都是这个数）
    0001—---操作字段（0001为ARP请求，0002为ARP应答）
    CE1A820C6B07---源mac，还是你的PC的MAC地址
    C0A8127A-------源IP地址，就是你的PC的ip
    000000000000---目的mac，因为不知道，所以把这6个字节胡乱填充一下就好
    ADC2485E-------目的ip，就是Google的IP
    00000B00482A00000D00000060FB5EFB61FB---这18个字节都是填充，就是为了凑够以太网帧最小长度60字节
</code></pre>

<p>然后路由器收到PC的ARP广播请求后就给你发送应答，这个应答帧为：</p>

<pre><code>    CE1A8206DA07000A3501FA1708060001080006040002000A3501FA17ADC2485ECE1A8206DA07C0A8127A00000B00482A00000D00000060FB5EFB61FB
</code></pre>

<p>按照以太网帧格式拆分后为：</p>

<pre><code>    CE1A8206DA07---目的MAC，ARP应答不是广播帧，它直接把PC的MAC地址当成目的MAC
    000A3501FA17---源MAC，这个是冒牌的，值本来该是Google服务器的MAC地址，但是这里路由器用自己的MAC来冒充
    0806—---帧类型（以太网帧都是这个数）
    0001----硬件类型（以太网帧都是这个数）
    0800----协议类型（以太网帧都是这个数）
    06----硬件地址长度（以太网帧都是这个数）
    04----协议地址长度（以太网帧都是这个数）
    0002—---操作字段（1为ARP请求，2为ARP应答）
    000A3501FA17---源MAC
    ADC2485E-------源IP地址，这个必须是ARP请求中的那个目的IP，也就是Google的IP。这个是重中之重，我的代码在
            这犯过错误，如果PC收到应答后检查这个IP发现与自己请求的目的IP不一样，心说，莫名其妙，我
            什么时候请求这个IP的MAC地址了？滚！它就会果断抛弃这个帧，然后继续请求，
            谁知道Google的MAC地址呀！！！
    CE1A8206DA07---目的mac也就是PC的MAC地址
    C0A8127A-------目的ip，就是PC的IP
    00000B00482A00000D00000060FB5EFB61FB---这18个字节都是填充，为了凑够以太网帧最小长度60字节，这个应答完全
                        照抄了请求的填充，这些数都无所谓。
</code></pre>

<p>PC在收到这个帧后，就真以为那个MAC地址是Google的，然后就把帧一股脑全发给路由器了。</p>

<p>然后你就可以上Google了。
然后大家一起来拍砖！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对kosaraju算法的理解思路]]></title>
    <link href="http://Chienlung.github.com/blog/2012/12/17/dui-kosarajusuan-fa-de-li-jie-si-lu/"/>
    <updated>2012-12-17T21:51:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2012/12/17/dui-kosarajusuan-fa-de-li-jie-si-lu</id>
    <content type="html"><![CDATA[<p>这个算法网上很多介绍，但大多都很相似，着重介绍算法实现而没有证明或者容易理解的解释。我说下自己对kosaraju算法的理解思路。这个算法名字我不会读，搜了半天看到本尊，发现他长得像印度人，也就释然了。回正题。kosaraju算法用来求一个有向图的所有强连通分量，算法很简单，但是理解起来有点麻烦，我是这么觉得。但是跟无向图的连通分量求法结合起来，就非常容易理解了。所以理解这个Korasaju算法的前提是你理解无向图所有连通分量的算法，这个算法相当图森破。
先看无向图的连通分量求法，其实无向图的连通分量就都是强连通分量。无向图的强连通分量就是用DFS算法顺序遍历邻接表时顺道干点小动作，写下代码更直观一些：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define maxN 1024</span>
</span><span class='line'><span class="kt">int</span> <span class="n">marked</span><span class="p">[</span><span class="n">maxN</span><span class="p">];</span><span class="c1">//用于记录某个点是否被访问过，0为没有被临幸过，1为被临幸过</span>
</span><span class='line'><span class="kt">int</span> <span class="n">id</span><span class="p">[</span><span class="n">maxN</span><span class="p">];</span><span class="c1">//记录每个点所属的连通分量</span>
</span><span class='line'><span class="kt">int</span> <span class="n">count</span><span class="p">;</span><span class="c1">//记录连通分量总数目</span>
</span><span class='line'><span class="kt">void</span> <span class="n">cc</span><span class="p">(</span><span class="n">graph</span> <span class="o">*</span><span class="n">g</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">marked</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">marked</span><span class="p">));</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">id</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">id</span><span class="p">));</span>
</span><span class='line'>    <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">V</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="c1">//之所以这里用循环就是因为g指向的无向图可能不是一个连通图，而是由多个连同分量组成</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">marked</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span><span class="n">dfs</span><span class="p">(</span><span class="n">g</span><span class="p">,</span><span class="n">i</span><span class="p">);</span> <span class="n">count</span><span class="o">++</span><span class="p">;}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">dfs</span><span class="p">(</span><span class="n">graph</span> <span class="o">*</span><span class="n">g</span><span class="p">,</span><span class="kt">int</span> <span class="n">v</span><span class="p">){</span>
</span><span class='line'>    <span class="n">graphNode</span> <span class="o">*</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>    <span class="n">marked</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">id</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">=</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">=</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">adjlist</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">next</span><span class="p">;</span><span class="c1">//t指向v的邻接点</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">marked</span><span class="p">[</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">]){</span><span class="n">dfs</span><span class="p">(</span><span class="n">g</span><span class="p">,</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">);}</span><span class="c1">//这里是重点，就是你发现v到t-&gt;key有路径就把它算到跟自己在一个</span>
</span><span class='line'><span class="c1">//连通分量里了，这里有一个隐性前提，就是你提前知道t-&gt;key一定可以到v，所以你发现v可以到t-&gt;key的时候，你毫</span>
</span><span class='line'><span class="c1">//不犹豫把它算为跟自己一伙儿的了。Korasaju算法不同书上有不同的表述，区别是先遍历图g还是先遍历图g的逆向</span>
</span><span class='line'><span class="c1">//图，这只是顺序的区别。我把我看得版本完整说一下：（1）先DFS遍历图g的逆向图，记录遍历的逆后序。（什么</span>
</span><span class='line'><span class="c1">//叫逆后序？逆后序就是DFS时后序的逆序，注意逆后序不一定为DFS的前序。DFS前序为，访问某个顶点前，把它</span>
</span><span class='line'><span class="c1">//push进队列。DFS后序为访问完某个顶点后才把它push进队列。而DFS逆后序为访问完某个顶点后把它push进一个栈中。</span>
</span><span class='line'><span class="c1">//当DFS遍历完整个图后，后序队列的输出与逆后序栈的输出正好相反。）（2）然后按着图g逆向图的DFS遍历的逆后</span>
</span><span class='line'><span class="c1">//序序列遍历图g求所有的强连通分量，这一步的过程跟无向图求所有连通分量的算法一模一样！按着这里说的遍历顺</span>
</span><span class='line'><span class="c1">//序重复无向图求所有连通分量的步骤求出来的就是有向图的所有强连通分量，为什么呢？因为我们完成第一步后，按</span>
</span><span class='line'><span class="c1">//着第一步得到的逆后序要对有向图g进行DFS遍历的前一刻，前面这段过程就相当于我们完成了对这幅有向图g一个加工，</span>
</span><span class='line'><span class="c1">//把它加工成了一个无向图！也就是说，这个加工实现了我注释开头提到的那个隐性前提。所以后面按着无向图求所有</span>
</span><span class='line'><span class="c1">//连通分量的步骤求出来的就是有向图g的所有强连通分量。举个例子，比如有向图3-&gt;5-&gt;4-&gt;3，它的逆向图</span>
</span><span class='line'><span class="c1">//为3-&gt;4-&gt;5-&gt;3（你最好在纸上画下，就是个三角循环图），从逆向图的顶点3开始DFS，得到的逆后续为3，4,5 。</span>
</span><span class='line'><span class="c1">//按着这个顺序对原图进行DFS，DFS(3)时遇到5，则5肯定跟3在一个强连通分量中</span>
</span><span class='line'><span class="c1">//（为什么？因为我们逆向图DFS(5)时肯定能到达3，这就是隐形前提。所以正向图DFS(3)遇到5时，</span>
</span><span class='line'><span class="c1">//我们毫不犹豫把它算到自己一个强连通分量中。）</span>
</span><span class='line'>        <span class="n">t</span><span class="o">=</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过github和octopress搭建Blog详细步骤以及通过Octopress写博客的步骤]]></title>
    <link href="http://Chienlung.github.com/blog/2012/12/16/tong-guo-githubhe-octopressda-jian-blogxiang-xi-bu-zou-yi-ji-tong-guo-octopressxie-bo-ke-de-bu-zou/"/>
    <updated>2012-12-16T21:39:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2012/12/16/tong-guo-githubhe-octopressda-jian-blogxiang-xi-bu-zou-yi-ji-tong-guo-octopressxie-bo-ke-de-bu-zou</id>
    <content type="html"><![CDATA[<p>这篇文章是为像我一样的不懂ruby、不懂git的newbie写的，大牛请绕路。</p>

<p>开始之前先说点题外话，这几天对于我这个newbie来说是痛苦的，上段时间开始对Python极其感兴趣，自己又很喜欢豆瓣，所以想用豆瓣的API做点什么，于是为了获取Python版本的API，所以注册了github，但是我真的对这个网站毫无概念，就觉得跟网盘差不多，因为我相当孤陋寡闻，对于Linus开发的git听都没听过，我觉得自己简直弱爆了。这次通过搭建这个Blog，觉得github真的好酷！</p>

<p>搭建过程最最好的指导莫过于octopress的<a href="http://octopress.org/docs/">官方文档</a>，我开始为了图省劲，不停的搜索相关的搭建步骤，可是很失望，没有一个文档对我这个newbie的胃口。所以我就直接看官方文档，而且官方文档我也没全看，因为我只想快速把Blog搭起来，其它的我不想现在配置，facebook不是有句名言叫做<em>Done is better than perfect</em>吗？先搭起来再说。</p>

<p><a href="http://octopress.org/docs/">官方文档</a>中，我重点看的文档主要是两部分，一部分是<em>Getting Started</em>里面的<a href="http://octopress.org/docs/setup/">Initial setup</a>，另一部分是<em>Using Octopress</em>里面的<a href="http://octopress.org/docs/deploying/">Deploying Octopress</a>。其它的我觉得都是属于Perfect部分，我这里只说Done的部分。</p>

<h1>第一部分<a href="http://octopress.org/docs/setup/">Initial setup</a></h1>

<ol>
<li><p>安装Git</p>

<p> 在<em>Before You Begin</em>中的第1步<em>Install Git</em>那个链接你就不要按了，在天朝打不开，每次遇到科技网站打不开的时候我就抓狂得很！怎么安装呢，如果你跟我一样用的是Ubuntu 12.04，那么打开你的Terminal，输入：</p>

<pre><code>     sudo apt-get install git-core
</code></pre>

<p> 其它系统请自行Google。</p></li>
<li><p>安装Ruby 1.9.3</p>

<p> 我选择的是RVM，因为那几天<a href="http://octopress.org/docs/setup/rbenv/">rbenv</a>这个链接我打不开，所以我用的是<a href="http://octopress.org/docs/setup/rvm/">RVM</a>这个链接。严格按着每一步来执行。先是</p>

<pre><code>     curl -L https://get.rvm.io | bash -s stable --ruby
</code></pre>

 这个地方需要非常注意，这个命令执行后的提示非常重要，命令执行一会后会提示你输入

<pre><code>     q
</code></pre>

 然后才能继续，这个没有问题，然后命令执行完毕后，会提示你运行

<pre><code>     source /home/chienlung/.rvm/scripts/rvm
</code></pre>

 这个真的非常重要，否则后面安装Octopress时会出错，对于我这个Ruby小白来说我不知道为什么这样，但是这个命令很重要，我猜应该是运行rvm，否则后面那个命令会出错。运行完这个命令后。把文档中提示的下面三条命令：

<pre><code>     rvm install 1.9.3 
     rvm use 1.9.3 
     rvm rubygems latest
</code></pre>

 运行完毕，RVM就算装完了。完事你可以输入

<pre><code>     ruby --version
</code></pre>

<p> 来查看你用的是否为ruby 1.9.3，这个没什么问题。</p></li>
<li><p>安装Octopress</p>

<p> <a href="http://octopress.org/docs/setup/">Setup Octopress</a>时，严格执行文档中这三个命令即可：</p>

<pre><code>     git clone git://github.com/imathis/octopress.git octopress
     cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
     ruby --version  # Should report Ruby 1.9.3
</code></pre>

 然后紧接着执行下面命令来安装依赖，也许你现在犹豫刚才<code>cd octopress</code>了，现在要不要退出来，千万别，如果没有提示，这些命令必须在这个文件夹下执行：

<pre><code>     gem install bundler # 这里可能因为墙，或者网速可能会超时，那就重复尝试，实在不行换个时间点再来做
     rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command，如果前面安的是RVM，这句不用执行
     bundle install  # 还记得前面装RVM时我那个说点很重要那个命令了吗，如果不执行那句，这里就会失败
</code></pre>

 然后安装默认的Octopress theme，执行下面这个命令：

<pre><code>     rake install
</code></pre>

 好了，到这里算是安装完Octopresss了。

<h1>第二部分<a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a></h1></li>
<li><p>创建<a href="https://github.com/new">new Github repository</a></p>

<p> 这里先多说两句，在我们的Blog中为什么涉及到Github呢，因为，Github相当于我们的免费主机，我们把Blog的所有代码和相关内容都存储到了Github上，所以才有了这里的为我们的Blog创建一个Github仓库。<a href="https://github.com/new">戳这</a>进入创建repository，这里又有一个地方容易出错，就是repository name，这个名字的格式为<em>username.github.com</em>，这里的<em>username</em>必须跟你的github网站用户名相同，比如我的github用户名叫Chienlung，然后的repository name必须为<em>chienlung.github.com</em>，而不能是其它。开始我本来打算它<em>ponyo.github.com</em>，可是后面就是不成功，详细原因我还没去细究，先不管它，搭起来再说。后面Description你可也随便写，也可也不写。再后面一般选public，要是选private是要给github交钱的。再后面Initialize this repository with a README 前面的勾可以勾上也可也不勾上，它推荐勾上。好了，点击Create repository就完成了。
 这里还要多说几句，就是如果你申请github帐号后需要在本地系统生成SSH KEY，然后贴到你的github账户里，因为octopress命令是通过SSH方式进行Deploy的。如果你已经做过了，那就跳过这里。点击<a href="https://help.github.com/articles/generating-ssh-keys">Generating SSH Keys</a>，这个页面有详细的生成SSH KEY的步骤：
 打开一个新的Terminal终端，按如下步骤进行：
 第一步输入：</p>

<pre><code>     cd ~/.ssh #这个命令是检查你的用户目录下是否有一个叫.ssh的目录，如果没有的话直接跳到第三步，否则到第二步
</code></pre>

 第二步输入：

<pre><code>     ls # 这个命令会列出.ssh目录下的子目录，看里面是否有个叫id_rsa的。反正我这没有，没有的话直接跳到第三步，否则继续
     mkdir key_backup # 创建一个叫key_backup的目录
     cp id_rsa* key_backup # 把id_rsa keypair拷贝到key_backup目录下，我对这里id_rsa为什么后面跟个星号，我不清楚，通配符吗？我没用过这个命令
     rm id_rsa* # 删除这个id_rsa keypair
</code></pre>

 第三步输入(执行下面命令的时候，会问你是否输入一个文件来保存生成的key，官网要求什么也别输入，直接按Enter键即可)：

<pre><code>     ssh-keygen -t rsa -C "your_email@youremail.com" # 用你提供的Email生成key，这里的Email没有详细说明，我用的是注册github时用的那个。 
</code></pre>

 执行上面这个命令后，会有下面的提示：

<pre><code>     Enter passphrase (empty for no passphrase): # 这里的passphrase就是密码的意思，你随便输入一个密码，自己记住，以后deploy时会用到这个密码，这个密码也可以为空
     Enter same passphrase again: # 再次输入密码进行确认
</code></pre>

 第四步输入：

<pre><code>     sudo apt-get install xclip # 安装xclip，这是一个很碉堡的clipboard
     xclip -sel clip &lt; ~/.ssh/id_rsa.pub # 把id_rsa.pub文件里的内容拷贝到这个碉堡的clipboard上
</code></pre>

<p> 然后点击<a href="https://github.com/settings/profile">这里</a>去你的github“账户设置”，在这个页面左边侧条里有个<a href="https://github.com/settings/ssh">SSH Keys</a>链接，戳它转到一个新的页面，点击右上角那个“Add SSH Key”按钮，“Title”栏里你随便写，然后在“Key”栏里按Ctrl+V，就把你的SSH Key粘贴到里面了。然后点击“Add Key”按钮，好了，大功告成！</p></li>
<li><p>开始Deloy你的Blog
 执行下面的命令：</p>

<pre><code>     rake setup_github_pages # 这个命令执行后，会要求你输入你为Blog建立的repository的SSH地址，这个提示是个坑，而且不只有我一个newbie掉进去了，下面详细来说这个坑。
</code></pre>

 看<a href="http://stackoverflow.com/questions/12060903/github-error-repository-not-found-when-installing-octopress/13888445#13888445">stackoverflow关于这个坑的问答</a>，如果按照这个提示，我应该输入<code>git@github.com:Chienlung/chienlung.github.com</code>，结果就是说这个repository找不到，因为这个根本不是repository的SSH地址，后面还必须要加上<code>.git</code>，所以正确的输入应该为<code>git@github.com:Chienlung/chienlung.github.com.git</code>。
 然后输入下面的命令：

<pre><code>     rake generate # 这个命令就是把按照所有的更新在本地生成网站。注意这个命令的输出，有时候你的更改出错的时候，这个命令不会执行成功，然后你可也根据输出来检查自己到底哪里出错了。
</code></pre>

 然后输入下面的命令：

<pre><code>     rake deploy # 这个命令开始部署网站了，它也会更新github我们这个repository的master分支。如果是第一次用这个命令，会要求输入密码，这个密码就是前面生成SSH Key时你设定的那么个密码。   
</code></pre>

<p> 上面这三个命令以后会频繁使用，只要你修改了Blog的配置，或者写了增删改了文章，就要执行上面三个命令来更新你的Blog。执行<code>rake deploy</code>成功后，github会给你的邮箱发送邮件，告诉你成功了过一会或者立刻你就能看到你Blog的更新，这个的确有延迟，但是延迟不会很久。</p></li>
<li><p>更新Blog在github的repository的source分支
 执行下面的命令：</p>

<pre><code> git add .
 git commit -m 'your message' # 这个‘your message’你可以随便写，反正我这个小白是这么个干的
 git push origin source # 这个命令把本地的关于Blog的源代码完全push到了github上存储起来了。
</code></pre>

<p> 以后你对Blog有所更改后，执行完毕这些命令后，去这个分支下点开文件你就会看到一些改变。这三个命令也经常使用，跟上面那三个一样，你对你的Blog增删改以后要执行这个命令来更新repository。
到这里，算是完事了，输入你Blog的网址，类似与我这个<code>chienlung.github.com</code>，你就可以看到你的Blog啦。</p></li>
</ol>


<h1>第三部分：本地调试</h1>

<p>我觉得Octopress牛逼的地方，也是吸引我的地方就是写博客跟写程序似的。写完了你可以现在本地“调试”看结果，然后满意了再deploy到远端，下面我用修改Blog配置来举个例子。
找到Octopress文件夹下有个_config.yml文件，打开它，修改开头的一下内容：</p>

<pre><code>url: http://Chienlung.github.com
title: My Octopress Blog
subtitle: A blogging framework for hackers.
author: Your Name
simple_search: http://google.com/search
description:
</code></pre>

<p>把这些内容修改为下面的样子：</p>

<pre><code>url: http://Chienlung.github.com
title: 陆彦帑的博客
subtitle: 宗介波妞手拉手，宗介永远爱波妞。 
author: 陆彦帑
simple_search: http://google.com/search
description: 愿我如星君如月，夜夜流光相皎洁。
</code></pre>

<p>修改完后保存。然后执行如下命令：</p>

<pre><code>rake generate # 根据最新修改生成Blog，这里对于我等不懂Ruby的newbie来说又有个坑。
</code></pre>

<p><a href="http://stackoverflow.com/questions/10086806/i-can-not-do-any-modify-after-octopress-installed/13898285#13898285">stackoverflow也有关于这个坑的问答</a>，好吧，这个问答和上面那个都是我掉进去的坑，然后在stackoverflow上没有找到答案，我自己解决后顺便回答的。我掉进去的坑就是在description后面输入文字后rake generate时报错，我仔细看了编译输出然后把url后面的冒号连同空格复制到description后面，重新generate后才成功的，我猜是编码问题。
然后执行下面的命令：</p>

<pre><code>rake preview # 这个命令很碉堡，下面详细说。
</code></pre>

<p>在deploy之前执行这个命令，然后打开浏览器输入<code>localhost:4000</code>，就可以在本地查看你的修改后的Blog。而且，还有很重要的一点，这个命令执行过程中，你还可以接着修改你的Blog，修改完就立马显示到<code>localhost:4000</code>Blog内，直到你满意，然后按<code>Ctrl+C</code>退出这个命令。然后你就可以执行上面<code>开始Deloy你的Blog</code>和<code>更新Blog在github的repository的source分支</code>，里面我提到的六个命令来更新github和blog。</p>

<h1>第四步分：如何用Octopress写Blog以及写博客的两个命令</h1>

<p>我也是newbie，所以对这俩命令细节还不太清楚，而且我先在只会用其中一个。
先说我不会用的：</p>

<pre><code>rake new_page["文件名字"] # 我还没研究这个命令
</code></pre>

<p>我用过的一个：</p>

<pre><code>rake new_post["文件名字"] # 文件名字应该不能跟文件后缀，你可也试试加上会怎样。octopress内部会处理这个文件名，下面详细说下。
</code></pre>

<p>比如我这篇文章的文件名字叫<code>通过github和octopress搭建Blog步骤以及容易出错的地方</code>，它在home/octopress/source/posts目录下，而在这里的名字却是<code>2012-12-16-tong-guo-github-he-octopressda-jian-blogbu-zou-yi-ji-rong-yi-chu-cuo-de-di-fang.markdown</code>，看这个名字是不是很碉堡，注意后缀自动设置为了markdown。
好了，写了好几个小时，octopress真是个很合程序员口味的博客，这篇博客我就是在VIM中用Markdown写的。给你markdown语法的<a href="http://daringfireball.net/projects/markdown/syntax">英文版地址</a>和<a href="http://wowubuntu.com/markdown/">中文简体版地址</a>以及<a href="http://markdown.tw/">中文繁体版地址</a>。
看语法文档的时候如果能一边看一边练习就好了，当然很好了，所以再提供一个<a href="http://www.ctrlshift.net/project/markdowneditor/">Markdown在线编辑网站</a>。</p>
]]></content>
  </entry>
  
</feed>
